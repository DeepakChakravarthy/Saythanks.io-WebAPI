// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Saythanks;

namespace Saythanks.Migrations
{
    [DbContext(typeof(SaythanksContext))]
    partial class SaythanksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("pgcrypto")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Saythanks.ArInternalMetadatum", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("ar_internal_metadata_pkey");

                    b.ToTable("ar_internal_metadata");
                });

            modelBuilder.Entity("Saythanks.Inbox", b =>
                {
                    b.Property<string>("AuthId")
                        .HasColumnType("text")
                        .HasColumnName("auth_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("email_enabled")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("enabled")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("AuthId")
                        .HasName("inboxes_pk");

                    b.ToTable("inboxes");
                });

            modelBuilder.Entity("Saythanks.Note", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("public.gen_random_uuid()");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Byline")
                        .HasColumnType("text")
                        .HasColumnName("byline");

                    b.Property<string>("InboxesAuthId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inboxes_auth_id");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Uuid")
                        .HasName("notes_pk");

                    b.HasIndex("InboxesAuthId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Saythanks.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations");
                });

            modelBuilder.Entity("Saythanks.Note", b =>
                {
                    b.HasOne("Saythanks.Inbox", "InboxesAuth")
                        .WithMany("Notes")
                        .HasForeignKey("InboxesAuthId")
                        .HasConstraintName("notes_inboxes")
                        .IsRequired();

                    b.Navigation("InboxesAuth");
                });

            modelBuilder.Entity("Saythanks.Inbox", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
